#include <cxxtest/TestSuite.h>
#include <opencog/attention/AFRentCollectionAgent.h>
#include <opencog/attention/AttentionParamQuery.h>
#include <opencog/attentionbank/bank/AttentionBank.h>
#include <opencog/attentionbank/avalue/AttentionValue.h>
#include <opencog/atoms/Handle.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/cogserver/server/CogServer.h>
#include <iostream>

class MockAttentionBank {
public:
    void set_sti(const Handle&, float) {}
    void set_lti(const Handle&, float) {}
    void get_handle_set_in_attentional_focus(std::back_insert_iterator<HandleSeq>& targetSet) {
        Handle h1, h2;
        *targetSet = h1;
        *targetSet = h2;
    }
};

class MockAttentionValue {
public:
    AttentionValue::sti_t get_sti(const Handle&) const { return 100.0f; }
    AttentionValue::lti_t get_lti(const Handle&) const { return 50.0f; }
};

class AFRentCollectionAgentTestSuite : public CxxTest::TestSuite {
private:
    CogServer mockServer;
    AFRentCollectionAgent* agent;
    MockAttentionBank* mockBank;
    MockAttentionValue* mockAttentionValue;

public:
    void setUp() {
        mockBank = new MockAttentionBank();
        mockAttentionValue = new MockAttentionValue();
        agent = new AFRentCollectionAgent(mockServer);
        agent->_bank = mockBank;
    }

    void tearDown() {
        delete agent;
        delete mockBank;
        delete mockAttentionValue;
    }

    void testSelectTargets() {
        HandleSeq targetSet;
        mockBank->get_handle_set_in_attentional_focus(std::back_inserter(targetSet));
        agent->selectTargets(targetSet);
        TS_ASSERT(!targetSet.empty());
        TS_ASSERT_EQUALS(targetSet.size(), 2);
    }

    void testCollectRent() {
        HandleSeq targetSet;
        Handle h1, h2;
        float sti1 = mockAttentionValue->get_sti(h1);
        float lti1 = mockAttentionValue->get_lti(h1);
        targetSet.push_back(h1);
        targetSet.push_back(h2);
        agent->collectRent(targetSet);
        TS_ASSERT_LESS_THAN(mockAttentionValue->get_sti(h1), sti1);
        TS_ASSERT_LESS_THAN(mockAttentionValue->get_lti(h1), lti1);
    }
};

int main() {
    AFRentCollectionAgentTestSuite suite;

    std::cout << "Running tests..." << std::endl;
    
    suite.setUp();

    try {
        std::cout << "Running testSelectTargets..." << std::endl;
        suite.testSelectTargets();
        std::cout << "testSelectTargets passed!" << std::endl;

        std::cout << "Running testCollectRent..." << std::endl;
        suite.testCollectRent();
        std::cout << "testCollectRent passed!" << std::endl;
    }
    catch (const CxxTest::Error& e) {
        std::cerr << "Test failed: " << e.what() << std::endl;
    }

    suite.tearDown();

    std::cout << "All tests completed." << std::endl;

    return 0;
}
