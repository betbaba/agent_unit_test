#include <cxxtest/TestSuite.h>
#include <opencog/attention/AttentionParamQuery.h>
#include <opencog/attention/AFImportanceDiffusionAgent.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/attention/Neighbors.h>
#include <opencog/cogserver/server/CogServer.h>
#include <opencog/cogserver/modules/agents/AgentsModule.h>
#include <opencog/cogserver/modules/agents/Scheduler.h>
#include <opencog/attentionbank/bank/AttentionBank.h>
#include <opencog/attentionbank/types/atom_types.h>
#include <opencog/attentionbank/avalue/AttentionValue.h>
#include <opencog/atoms/truthvalue/SimpleTruthValue.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>
#include <opencog/util/algorithm.h>
#include <opencog/cogserver/server/Factory.h>

using namespace opencog;

class MockHandle {
public:
    int sti;

    void set_sti(int value) {
        sti = value;
    }

    int get_sti() const {
        return sti;
    }
};

class MockAttentionParamQuery {
public:
    void set_param_value(const std::string& param, const std::string& value) {
    }
};

class AFImportanceDiffusionUnitTest : public CxxTest::TestSuite {
public:
    MockAttentionParamQuery* mockParamQuery;
    CogServer cs;
    AFImportanceDiffusionAgent* agent;

    void setUp() {
        mockParamQuery = new MockAttentionParamQuery();
        agent = new AFImportanceDiffusionAgent(cs);
        mockParamQuery->set_param_value(AttentionParamQuery::dif_spread_percentage, "0.5");
        mockParamQuery->set_param_value(AttentionParamQuery::heb_max_alloc_percentage, "0.8");
        mockParamQuery->set_param_value(AttentionParamQuery::dif_spread_hebonly, "1");
        agent->_atq = mockParamQuery;
    }

    void tearDown() {
        delete mockParamQuery;
        delete agent;
    }

    void testInitialization() {
        TS_ASSERT_EQUALS(agent->classinfo().name(), "opencog::AFImportanceDiffusionAgent");
    }

    void testCalculateDiffusionAmount() {
        MockHandle h;
        h.set_sti(10);
        TS_ASSERT_EQUALS(agent->calculateDiffusionAmount(h), 5);
    }

    void testSpreadImportance() {
        HandleSeq diffusionSourceVector = agent->diffusionSourceVector();
        TS_ASSERT(diffusionSourceVector.size() > 0);
        agent->spreadImportance();
        double expected_value = 5;
        TS_ASSERT_EQUALS(diffusionSourceVector[0].get_sti(), expected_value);
    }

    void testEdgeCases() {
        HandleSeq emptyDiffusionSourceVector;
        agent->setDiffusionSourceVector(emptyDiffusionSourceVector);
        TS_ASSERT_THROWS_ANYTHING(agent->spreadImportance());
        MockHandle h;
        h.set_sti(0);
        TS_ASSERT_EQUALS(agent->calculateDiffusionAmount(h), 0);
        MockHandle hNegative;
        hNegative.set_sti(-5);
        TS_ASSERT(agent->calculateDiffusionAmount(hNegative) < 0);
    }
};

int main() {
    AFImportanceDiffusionUnitTest suite;

    std::cout << "Running tests..." << std::endl;
    
    suite.setUp();

    try {
        std::cout << "Running testInitialization..." << std::endl;
        suite.testInitialization();
        std::cout << "testInitialization passed!" << std::endl;

        std::cout << "Running testCalculateDiffusionAmount..." << std::endl;
        suite.testCalculateDiffusionAmount();
        std::cout << "testCalculateDiffusionAmount passed!" << std::endl;

        std::cout << "Running testSpreadImportance..." << std::endl;
        suite.testSpreadImportance();
        std::cout << "testSpreadImportance passed!" << std::endl;

        std::cout << "Running testEdgeCases..." << std::endl;
        suite.testEdgeCases();
        std::cout << "testEdgeCases passed!" << std::endl;
    }
    catch (const CxxTest::TestException& e) {
        std::cerr << "Test failed: " << e.what() << std::endl;
    }

    suite.tearDown();

    std::cout << "All tests completed." << std::endl;

    return 0;
}
