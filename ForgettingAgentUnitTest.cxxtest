#include <gtest/gtest.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/attention/ForgettingAgent.h>
#include <opencog/atomspace/Atom.h>

namespace opencog {

class MockCogServer : public CogServer {
public:
    AtomSpace* create_atom_space() override {
        return new AtomSpace();
    }
};

class ForgettingAgentTest : public ::testing::Test {
protected:
    MockCogServer mockServer;
    ForgettingAgent* agent;
    AtomSpace* atomSpace;

    void SetUp() override {
        atomSpace = mockServer.create_atom_space();
        agent = new ForgettingAgent(mockServer);
    }

    void TearDown() override {
        delete agent;
        delete atomSpace;
    }
};

TEST_F(ForgettingAgentTest, TestInitialization) {
    EXPECT_EQ(agent->maxSize, 10000);
    EXPECT_EQ(agent->accDivSize, 100);
    EXPECT_EQ(agent->forgetThreshold, AttentionValue::MAXLTI);
}

TEST_F(ForgettingAgentTest, TestForgettingProcess) {
    Handle atom1 = atomSpace->create_atom<Atom>();
    atomSpace->add_atom(atom1);
    Handle atom2 = atomSpace->create_atom<Atom>();
    atomSpace->add_atom(atom2);

    _bank->set_lti(atom1, 1);
    _bank->set_lti(atom2, 10);

    agent->forget();

    EXPECT_FALSE(atomSpace->has_atom(atom1));
    EXPECT_TRUE(atomSpace->has_atom(atom2));
}

TEST_F(ForgettingAgentTest, TestNoAtomsToForget) {
    Handle atom = atomSpace->create_atom<Atom>();
    atomSpace->add_atom(atom);

    agent->forget();

    EXPECT_TRUE(atomSpace->has_atom(atom));
}

TEST_F(ForgettingAgentTest, TestHighForgettingRate) {
    agent->forgetThreshold = 0;

    Handle atom1 = atomSpace->create_atom<Atom>();
    atomSpace->add_atom(atom1);
    _bank->set_lti(atom1, 1);

    Handle atom2 = atomSpace->create_atom<Atom>();
    atomSpace->add_atom(atom2);
    _bank->set_lti(atom2, 10);

    agent->forget();

    EXPECT_FALSE(atomSpace->has_atom(atom1));
    EXPECT_TRUE(atomSpace->has_atom(atom2));
}

TEST_F(ForgettingAgentTest, TestLowForgettingRate) {
    agent->forgetThreshold = AttentionValue::MAXLTI;

    Handle atom1 = atomSpace->create_atom<Atom>();
    atomSpace->add_atom(atom1);
    _bank->set_lti(atom1, 1);

    Handle atom2 = atomSpace->create_atom<Atom>();
    atomSpace->add_atom(atom2);
    _bank->set_lti(atom2, 10);

    agent->forget();

    EXPECT_TRUE(atomSpace->has_atom(atom1));
    EXPECT_TRUE(atomSpace->has_atom(atom2));
}

TEST_F(ForgettingAgentTest, TestTooManyAtomsToForget) {
    agent->maxSize = 3;

    for (int i = 0; i < 10; ++i) {
        Handle atom = atomSpace->create_atom<Atom>();
        atomSpace->add_atom(atom);
        _bank->set_lti(atom, i);
    }

    agent->forget();

    EXPECT_LE(atomSpace->size(), agent->maxSize);
}

TEST_F(ForgettingAgentTest, TestForgettingThreshold) {
    agent->forgetThreshold = 5;

    Handle atom1 = atomSpace->create_atom<Atom>();
    atomSpace->add_atom(atom1);
    _bank->set_lti(atom1, 3);

    Handle atom2 = atomSpace->create_atom<Atom>();
    atomSpace->add_atom(atom2);
    _bank->set_lti(atom2, 6);

    agent->forget();

    EXPECT_FALSE(atomSpace->has_atom(atom1));
    EXPECT_TRUE(atomSpace->has_atom(atom2));
}

}  // namespace opencog

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
